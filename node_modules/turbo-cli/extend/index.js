var program = require('commander')
var shell = require('shelljs')
var path = require('path')
var prompt = require('prompt')
var utils = require('../utils')
var scaffold = require('../scaffold')
var reactDependencies = require('../default/packagejson/react.json')
var gulpDependencies = require('../default/packagejson/gulp.json')

var capitalize = function(string) {
	return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()
}

var packageJsonConfigs = {
	react: 'react.json',
	gulp: 'gulp.json',
	vue: 'vue.json'
}

var currentConfig = function(format){
	return new Promise(function(resolve, reject){
		var jsonConfig = packageJsonConfigs[format]
		if (jsonConfig == null){
			reject(new Error('Invalid Format'))
			return
		}

		utils.getRequest('https://cdn.turbo360-dev.com/dist/config/extend/'+jsonConfig, null)
		.then(function(response){
			// console.log('CONFIG: ' + JSON.stringify(response))
			resolve(response.data)
		})
		.catch(function(err){
			reject(err)

			// don't reject this promise. if error, return static
			// value from above.
			// resolve({
			// 	vertexVersion: VERTEX_NPM_VERSION,
			// 	turboVersion: TURBO_NPM_VERSION
			// })
		})
	})
}

module.exports = function(shell, name, opts){

	return new Promise(function(resolve, reject){
		if (name == 'resource'){
			if (opts.name == null){
				reject(new Error('Invalid Resource Name'))
				return
			}

			if (opts.name.length<2){
				reject(new Error('Invalid Resource Name'))
				return
			}

			const schemaName = capitalize(opts.name)
			utils.readFile(path.join(__dirname, '../extend/resource/Base.js'))
			.then(function(data){
				var str = data.replace("class Base", "class "+schemaName)
				str = str.replace("module.exports = Base", "module.exports = "+schemaName)
				str = str.replace("default: 'base'", "default: '"+opts.name.toLowerCase()+"'")

				shell.cd('models')
				return utils.write(schemaName+'.js', str+'\n')
			})
			.then(function(data){
				shell.cd('..')
				return utils.readFile(path.join(__dirname, '../extend/resource/BaseController.js'))
			})
			.then(function(data){
				var str = data.replace("const Base = require('../models/Base')", "const "+schemaName+" = require('../models/"+schemaName+"')")
				str = str.replace("super(Base, process.env)", "super("+schemaName+", process.env)")
				str = str.replace(new RegExp("BaseController", 'g'), schemaName+"Controller") // replace all occurrences
				str = str.replace(new RegExp("Base.collectionName", 'g'), schemaName+".collectionName")
				str = str.replace(new RegExp("Base.resourceName", 'g'), schemaName+".resourceName")
				str = str.replace(new RegExp("base.summary", 'g'), schemaName.toLowerCase()+".summary")
				str = str.replace(new RegExp("bases", 'g'), schemaName.toLowerCase()+"s") // pluralize. need a better way to do this
				str = str.replace(new RegExp("base =", 'g'), schemaName.toLowerCase()+" =")
				str = str.replace(new RegExp("return base", 'g'), "return "+schemaName.toLowerCase())
				str = str.replace(new RegExp("Base.", 'g'), schemaName+".")

				shell.cd('controllers')
				return utils.write(schemaName+'Controller.js', str+'\n')
			})
			.then(function(data){
				shell.cd('..')
				shell.cd('tmp')
				var dbStr = ''
				return utils.write(schemaName.toLowerCase()+'s.db', dbStr)
			})
			.then(function(data){
				shell.cd('..')
				resolve({
					confirmation:'success',
					message:'Resource "'+schemaName+ '" successfully added'
				})
			})
			.catch(function(err){
				reject(err)
			})

			return
		}

		if (name == 'api'){
			// models:
			shell.mkdir('-p', 'models')
			shell.cp('-R', path.join(__dirname, '../extend/api/models/*'), 'models/')

			// controllers:
			shell.mkdir('-p', 'controllers')
			shell.cp('-R', path.join(__dirname, '../extend/api/controllers/*'), 'controllers/')

			// routes:
			shell.cp('-R', path.join(__dirname, '../extend/api/routes/*'), 'routes/')

			resolve({confirmation:'success', message:null})
			return
		}

		if (name == 'cms'){
			scaffold(shell, 'base', 'template', null)
			return
		}

		if (name == 'gulp'){
			shell.cp('-R', path.join(__dirname, '../extend/gulp/gulpfile.js'), 'gulpfile.js')
			utils.readFile('package.json')
			.then(function(data){
				var json = JSON.parse(data)
				var scripts = Object.assign({}, json.scripts)
				scripts['clean'] = 'rimraf ./public/dist'

				var currentBuild = scripts.build || ''
				scripts['build'] = (currentBuild=='') ? 'npm run clean && gulp prod' : currentBuild+' && gulp prod'
				json['scripts'] = scripts

				utils.write('package.json', JSON.stringify(json, null, 2) + '\n')
				return currentConfig('gulp')
			})
			.then(data => {
				// console.log('GULP CONFIG: ' + JSON.stringify(data))
				shell.exec('npm i -D ' + gulpDependencies.devDependencies.join(' '))
				resolve({confirmation:'success', message:'\n\nGulp successfully integrated. Gulpfile.js file added and "build" & "clean" scripts updated in package.json\n\n'})
			})
			.catch(function(err){
				// this is the fallback in case the network request fails:
				shell.exec('npm i -D ' + gulpDependencies.devDependencies.join(' '))
				resolve({confirmation:'success', message:'\n\nGulp successfully integrated. Gulpfile.js file added and "build" & "clean" scripts updated in package.json\n\n'})
			})
			return
		}

		if (name == 'webpack'){
			var schema = {
				properties: {
					framework: {
						message: 'Framework: (react, vue)',
						required: true
					}
				}
			}

			prompt.start()

			prompt.get(schema, function(err, result) {
				var allowed = ['react', 'vue']
				if (err){
					reject(err)
					return
				}

				var selectedFramework = result.framework.trim()

				// console.log(JSON.stringify(result)) // {"framework":"react"}
				if (allowed.indexOf(selectedFramework)== -1){
					reject(new Error('Invalid framework. Must be "react" or "vue"'))
					return
				}

				shell.cp('-R', path.join(__dirname, '../extend/webpack/webpack.config.'+result.framework+'.js'), 'webpack.config.js')

				var json = null
				utils.readFile('package.json')
				.then(function(data){
					json = JSON.parse(data)
					var scripts = Object.assign({}, json.scripts)
					scripts['clean'] = 'rimraf ./public/dist'
					scripts['build'] = 'npm run clean && cross-env NODE_ENV=production webpack -p'
					scripts['dev'] = 'webpack --mode development -w'
					// scripts['postinstall'] = 'npm run build'
					json['scripts'] = scripts

					utils.write('package.json', JSON.stringify(json, null, 2) + '\n')
					return currentConfig(selectedFramework)
				})
				.then(function(data){
					var include = {
						'react-redux': false,
						'redux': false,
						'redux-thunk': false,
						'react-dropzone': false,
						'react-bootstrap': false,
						'gulp': false,
						'gulp-6to5': false,
						'gulp-autoprefixer': false,
						'gulp-clean-css': false,
						'gulp-concat': false,
						'gulp-less': false,
						'gulp-rename': false,
						'gulp-sass': false,
						'gulp-uglify': false,
						'json-loader': false
					}

					// if these are already installed, don't reinstall:
					include['react'] = (json.dependencies.react) ? false : true
					include['react-dom'] = (json.dependencies['react-dom']) ? false : true

					var filtered = data.dependencies.filter(function(dep){
						var packageName = dep.split('@')[0]
						return (include[packageName]===undefined) ? true : include[packageName]
					})

					var filteredDev = data.devDependencies.filter(function(dep){
						var packageName = dep.split('@')[0]
						return (include[packageName]===undefined) ? true : include[packageName]
					})

					shell.exec('npm i -S ' + filtered.join(' '))
					shell.exec('npm i -D ' + filteredDev.join(' '))
					resolve({message: 'webpack.config.js file added to project root directory.'})
				})
				.catch(function(err){
					reject(err)
				})
			})

			return
		}


		if (name == 'react'){
			// utils.readFile(path.join(__dirname, 'package.json'))
			utils.readFile('package.json')
			.then(function(data){
				var json = JSON.parse(data)
				var scripts = Object.assign({}, json.scripts)
				scripts['clean'] = 'rimraf ./public/dist'
				scripts['build'] = 'npm run clean && cross-env NODE_ENV=production webpack -p && gulp prod'
				scripts['dev'] = 'webpack --mode development -w'
				scripts['postinstall'] = 'npm run build'
				json['scripts'] = scripts

				utils.write('package.json', JSON.stringify(json, null, 2) + '\n')

				// webpack and gulp configs:
				shell.cp('-R', path.join(__dirname, '../default/vertex/webpack.config.js'), 'webpack.config.js')
				shell.cp('-R', path.join(__dirname, '../default/vertex/gulpfile.js'), 'gulpfile.js')

				// views:
				shell.cp('-R', path.join(__dirname, '../default/vertex/views/react.mustache'), 'views/index.mustache')

				// React Source:
				shell.mkdir('-p', 'src')
				shell.cp('-R', path.join(__dirname, '../default/client/src/*'), 'src/')

				return currentConfig('react')
			})
			.then(data => {
				// console.log('REACT CONFIG: ' + JSON.stringify(data))
				shell.exec('npm i -S ' + data.dependencies.join(' '))
				shell.exec('npm i -D ' + data.devDependencies.join(' '))
				shell.exec('npm run build')

				resolve({confirmation:'success', message:'\n\nReact successfully integrated.\n\n'})
			})
			.catch(function(err){
				// console.log('Error: ' + err)

				// this is the fallback in case the network request fails:
				shell.exec('npm i -S ' + reactDependencies.dependencies.join(' '))
				shell.exec('npm i -D ' + reactDependencies.devDependencies.join(' '))
				shell.exec('npm run build')
				resolve({confirmation:'success', message:'\n\nReact successfully integrated.\n\n'})
			})

			return
		}

		if (name == 'vue'){
			utils.readFile('package.json')
			.then(function(data){
				var json = JSON.parse(data)
				var scripts = Object.assign({}, json.scripts)
				scripts['clean'] = 'rimraf ./public/dist'
				scripts['build'] = 'npm run clean && cross-env NODE_ENV=production webpack -p'
				scripts['dev'] = 'webpack --mode development -w'
				scripts['postinstall'] = 'npm run build'
				json['scripts'] = scripts
				utils.write('package.json', JSON.stringify(json, null, 2) + '\n')

				// webpack config:
				shell.cp('-R', path.join(__dirname, '../default/vue/webpack.config.js'), 'webpack.config.js')

				// views:
				shell.cp('-R', path.join(__dirname, '../default/vue/index.mustache'), 'views/index.mustache')

				// Vue Source:
				shell.mkdir('-p', 'src')
				// shell.cp('-R', path.join(__dirname, '../default/vue/src/main.js'), 'src/main.js')
				shell.cp('-R', path.join(__dirname, '../default/vue/src/*'), 'src/')

				return currentConfig('vue')
			})
			.then(function(data){
				// console.log('VUE CONFIG: ' + JSON.stringify(data))
				shell.exec('npm i -D ' + data.devDependencies.join(' '))
				shell.exec('npm run build')

				resolve({confirmation:'success', message:'\n\Vue JS successfully integrated.\n\n'})
			})
			.catch(function(err) {
				console.log('Error - ' + err)
			})

			return
		}

		reject(new Error('Invalid Format'))
	})

}
