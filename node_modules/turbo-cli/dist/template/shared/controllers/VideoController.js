const vertex = require('vertex360')({ site_id: process.env.TURBO_APP_ID })
const Controller = vertex.Controller
const Video = require('../models/Video')

class VideoController extends Controller {
  constructor () {
    super(Video, process.env)
  }

  get (params) {
    return new Promise((resolve, reject) => {
      Video.find(params, Controller.parseFilters(params))
        .then(videos => {
          resolve(Video.convertToJson(videos))
        })
        .catch(err => {
          reject(err)
        })
    })
  }

  getById (id) {
    return new Promise((resolve, reject) => {
      Video.findById(id)
        .then(video => {
          if (video == null) {
            throw new Error(Video.resourceName + ' ' + id + ' not found.')
          }

          resolve(video.summary())
        })
        .catch(err => {
          reject(err)
        })
    })
  }

  post (body) {
    return new Promise((resolve, reject) => {
      if (body.title != null) {
        body.slug = vertex.utils.slugVersion(body.title, 6)
      }

      const dateString = vertex.utils.formattedDate() // Tuesday, May 7, 2019
      const dateParts = dateString.split(', ')
      body.dateString = (dateParts.length === 3) ? dateParts[1] + ', ' + dateParts[2] : dateString

      Video.create(body)
        .then(video => {
          resolve(video.summary())
        })
        .catch(err => {
          reject(err)
        })
    })
  }

  put (id, params) {
    return new Promise((resolve, reject) => {
      Video.findByIdAndUpdate(id, params, { new: true })
        .then(video => {
          resolve(video.summary())
        })
        .catch(err => {
          reject(err)
        })
    })
  }

  delete (id) {
    return new Promise((resolve, reject) => {
      Video.findByIdAndRemove(id)
        .then(() => {
          resolve()
        })
        .catch(err => {
          reject(err)
        })
    })
  }
}

module.exports = VideoController
