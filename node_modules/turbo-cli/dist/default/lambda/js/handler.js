'use strict';

var functions = require('./index')

module.exports.main = (event, context, callback) => {

	// if name not specified, return list of functions:
	if (event.name == null){
		var keys = Object.keys(functions)
		callback(null, {
			statusCode: 200,
			proxy: 'json',
			body: JSON.stringify({
				confirmation: 'success',
				functions: keys
			})
		})

		return
	}

	const func = functions[event.name]
	if (func == null){ // not found
		callback(null, {
		    statusCode: 404,
			proxy: 'json',
			body: JSON.stringify({
				confirmation: 'fail',
				message: 'function ' + event.name + ' not found'
			})
		})

		return
	}

	var req = { // both of these can be null
		method: event.method,
		query: event.query,
		body: event.body
	}

	var status = 200
	var headers = {}
	var res = {
		headers: {},
		status: (code) => {
			status = code
			return res
		},
		json: (data) => {
			callback(null, {
				headers: headers,
				statusCode: status,
				proxy: 'json',
				body: JSON.stringify(data)
			})
		},
		send: (response) => {
			// callback(null, response)
			callback(null, {
				headers: headers,
				statusCode: status,
				proxy: 'send',
				body: response
			})
		},
		render: (template) => {
			callback(null, {
				headers: headers,
				statusCode: status,
				proxy: 'send',
				body: template
			})
		},
		redirect: (url) => {
			callback(null, {
				headers: headers,
				statusCode: status,
				proxy: 'redirect',
				body: url
			})
		},
		setHeader: (key, value) => {
			headers[key] = value
		},
		end: () => {
		    if (headers['Location'] != null){ // this is a redirect, send redirect callback to Turbo
    			callback(null, {
    				headers: headers,
    				statusCode: status,
    				proxy: 'redirect',
    				body: headers['Location']
    			})
    			
		        return
		    }
		    
		    // send back generic headers response:
			callback(null, {
				headers: headers,
				statusCode: status,
				proxy: 'send',
				body: {"confirmation":"success", "headers":headers}
			})
		}
	}

	func(req, res)
}