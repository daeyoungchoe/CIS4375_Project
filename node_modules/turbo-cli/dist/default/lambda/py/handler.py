import json
import app

# def convert_to_json(data):
# 	return {
# 		'statusCode': 200,
# 		'proxy': 'json',
# 		'body': json.dumps(data)
# 	}

def function_not_found(event):
	funcName = event['name']
	body = {
		'confirmation':'fail',
		'message': 'Function ' + funcName + ' not found'
	}

	response = {
		'statusCode': 404,
		'proxy': 'json',
		'body': json.dumps(body)
	}
	
	return response

def response_handler(data):
	proxy = data['proxy']
	if (proxy == 'json'):
		return {'statusCode':200, 'proxy':'json', 'body':json.dumps(data['body'])}

	if (proxy == 'redirect'):
		return {'statusCode':200, 'proxy':'redirect', 'body':data['body']}

	return {
		'statusCode': 200,
		'proxy': 'json',
		'body': json.dumps(data)
	}


class Res(object):
	def redirect(self, url):
		return {
			'proxy': 'redirect',
			'body': url
		}

	def jsonify(self, obj):
		return {
			'proxy': 'json',
			'body': obj
		}

def trigger(event, context):
	funcName = event['name']
	try:
		method = getattr(app, funcName)
		res = Res()
		return response_handler(method(event, res))
	except AttributeError:
		return function_not_found(event)
	else:
		return function_not_found(event)
